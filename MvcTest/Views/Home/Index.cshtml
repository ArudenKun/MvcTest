@model MvcTest.Models.EmployeeViewModel

@{
    ViewBag.Title = "Home Page";
}

@Html.AntiForgeryToken()
<div class="d-flex gap-3">
    <div>
        <h1>Mismatch</h1>
        <table id="mismatch" class="table table-striped table-bordered nowrap">
            <thead>
            <tr>
                <th>Id</th>
                <th>FirstName</th>
                <th>LastName</th>
                <th>BirthDate</th>
                <th>HireDate</th>
            </tr>
            </thead>
        </table>
    </div>

    <div>
        <h1>Match</h1>
        <table id="match" class="table table-striped table-bordered nowrap">
            <thead>
            <tr>
                <th>Id</th>
                <th>FirstName</th>
                <th>LastName</th>
                <th>BirthDate</th>
                <th>HireDate</th>
            </tr>
            </thead>
        </table>
    </div>
</div>

<script type="text/javascript" charset="utf8">
    $(document).ready(function () {
        const sentIds = new Set();
        const token = $('input[name="__RequestVerificationToken"]').val();

        const matchInstance = $('#match').DataTable({
            processing: true,
            serverSide: true,
            pageLength: 10,
            responsive: true,
            fixedHeader: true,
            searching: true,
            paging: true,
            ordering: true,
            autoWidth: true,
            ajax: {
                url: '/Home/Load',
                type: 'POST',
                dataType: 'json',
                headers: {
                    "RequestVerificationToken": token
                },
                error: function (data, status, error) {
                    console.log(data);
                }
            },
            columns: [
                {data: 'Id'},
                {data: 'FirstName'},
                {data: 'LastName'},
                {data: 'BirthDate'},
                {data: 'HireDate'}
            ]
        });

        const mismatchInstance = $('#mismatch').DataTable({
            processing: true,
            serverSide: true,
            pageLength: 10,
            responsive: true,
            fixedHeader: true,
            searching: true,
            paging: true,
            ordering: true,
            autoWidth: true,
            select: {
                style: 'os'
            },
            ajax: {
                url: '/Home/Load?matched=false',
                type: 'POST',
                dataType: 'json',
                headers: {
                    "RequestVerificationToken": token
                },
                error: function (data, status, error) {
                    console.log(data);
                }
            },
            columns: [
                {data: 'Id'},
                {data: 'FirstName'},
                {data: 'LastName'},
                {data: 'BirthDate'},
                {data: 'HireDate'}
            ],
            layout: {
                bottomStart: {
                    buttons: [
                        {
                            text: 'Approve',
                            async: 100,
                            action: function (e, dt, node, config, cb) {
                                const selectedRows = dt.select.cumulative().rows; // Get selected rows
                                if (selectedRows.length === 0) {
                                    console.log("No row selected.");
                                    return; // Exit if nothing is selected
                                }

                                console.log("Selected: " + selectedRows);

                                const ids = selectedRows.filter(row => !sentIds.has(row));
                                const url = '@Url.Content("~/")' + "Home/Update";
                                $.ajax({
                                    url: url,
                                    type: 'POST',
                                    dataType: "json",
                                    data: {ids: ids}, // Send as an array
                                    headers: {
                                        "RequestVerificationToken": token
                                    },
                                    beforeSend: function () {
                                        mismatchInstance.button(0).enable(false);
                                    },
                                    success: function (data) {
                                        if (data === "Approved") {
                                            dt.ajax.reload();
                                            matchInstance.ajax.reload();
                                            ids.forEach(id => sentIds.add(id));
                                        }
                                    },
                                    complete: function () {
                                        cb();
                                    }
                                });
                            },
                            enabled: false
                        },
                        {
                            text: "Approve All",
                            async: 100,
                            action: function (e, dt, node, config, cb) {
                                const url = '@Url.Content("~/")' + "Home/UpdateAll";
                                $.ajax({
                                    url: url,
                                    type: 'POST',
                                    dataType: "json",
                                    headers: {
                                        "RequestVerificationToken": token
                                    },
                                    beforeSend: function () {
                                        mismatchInstance.button(0).enable(false);
                                    },
                                    success: function (response) {
                                        if (response === "Approved") {
                                            dt.ajax.reload();
                                            matchInstance.ajax.reload();
                                        }
                                    },
                                    complete: function () {
                                        mismatchInstance.button(1).enable(false);
                                        cb()
                                    }
                                });
                            }
                        }
                    ]
                }
            }
        });

        mismatchInstance.on('select deselect', function () {
            const selectedRows = mismatchInstance.rows({selected: true}).count();
            const rows = mismatchInstance.rows().count();
            mismatchInstance.button(0).enable(selectedRows > 0);
            mismatchInstance.button(1).enable(rows > 0);
        });
    });
</script>
